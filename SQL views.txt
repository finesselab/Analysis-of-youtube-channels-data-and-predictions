1. VIDEO UPLOAD INTERVALS.

CREATE   VIEW [dbo].[broda_shaggi_upload_intervals] AS

WITH current_last_upload_date AS (

	SELECT upload_date, 
		LAG(upload_date) OVER(ORDER BY upload_date) AS last_upload_date
	FROM broda_shaggi3),

upload_intervals AS (

	SELECT upload_date, last_upload_date, 
			DATEDIFF(DAY, last_upload_date, upload_date) AS upload_interval
	FROM current_last_upload_date)


SELECT 'Broda Shaggi' AS comedian, upload_date, last_upload_date, upload_interval,
	CASE WHEN upload_interval >= 60 THEN '2+ months'
	     WHEN upload_interval >= 30 AND upload_interval < 60 THEN '1+ months'
		 WHEN upload_interval >= 14 AND upload_interval < 30 THEN '2+ weeks'
		 WHEN upload_interval > 6 AND upload_interval < 14 THEN '1+ week'
		 WHEN upload_interval = 6 THEN '6 days'
		 WHEN upload_interval = 5 THEN '5 days'
		 WHEN upload_interval = 4 THEN '4 days'
		 WHEN upload_interval = 3 THEN '3 days'
		 WHEN upload_interval = 2 THEN '2 days'
		 WHEN upload_interval = 1 THEN '1 day'
		 WHEN upload_interval = 0 THEN 'Same day'
	ELSE Null
	END AS interval_group
FROM upload_intervals




CREATE   VIEW [dbo].[all_comedian_upload_interval] AS 

SELECT * 
FROM taaooma_upload_intervals

UNION

SELECT *
FROM mclively_upload_intervals

UNION

SELECT *
FROM mr_macaroni_upload_intervals

UNION

SELECT *
FROM broda_shaggi_upload_intervals


2. MONTHLY RUNNING TOTAL OF VIEWS & SIX MONTHS MOVING AVERAGE OF VIEWS.


CREATE   VIEW [dbo].[monthly_running_total_6monthsMA] AS 

	WITH monthly_views AS (
	SELECT EOMONTH(upload_date) AS month_end, SUM(view_count) AS total_views
	FROM mc_lively
	GROUP BY EOMONTH(upload_date)
	),

	monthly_views1 AS (
	SELECT EOMONTH(upload_date) AS month_end, SUM(view_count) AS total_views
	FROM broda_shaggi3
	GROUP BY EOMONTH(upload_date)
	),

	 monthly_views2 AS (
	SELECT EOMONTH(upload_date) AS month_end, SUM(view_count) AS total_views
	FROM taaooma
	GROUP BY EOMONTH(upload_date)
	),

	monthly_views3 AS (
	SELECT EOMONTH(upload_date) AS month_end, SUM(view_count) AS total_views
	FROM mr_macaroni
	GROUP BY EOMONTH(upload_date)
	)


	SELECT month_end, 'Mc_lively' AS comedian, total_views, 
			SUM(total_views) OVER(ORDER BY month_end) AS running_total,
			AVG(total_views) OVER(ORDER BY month_end ROWS BETWEEN 5 PRECEDING AND CURRENT ROW) AS moving_average
	FROM monthly_views

	UNION

	SELECT month_end, 'Broda Shaggi' AS comedian, total_views, 
			SUM(total_views) OVER(ORDER BY month_end) AS running_total,
			AVG(total_views) OVER(ORDER BY month_end ROWS BETWEEN 5 PRECEDING AND CURRENT ROW) AS moving_average
	FROM monthly_views1

	UNION

	SELECT month_end, 'Taaooma' AS comedian, total_views, 
			SUM(total_views) OVER(ORDER BY month_end) AS running_total,
			AVG(total_views) OVER(ORDER BY month_end ROWS BETWEEN 5 PRECEDING AND CURRENT ROW) AS moving_average
	FROM monthly_views2

	UNION

	SELECT month_end, 'Mr macaroni' AS comedian, total_views, 
			SUM(total_views) OVER(ORDER BY month_end) AS running_total,
			AVG(total_views) OVER(ORDER BY month_end ROWS BETWEEN 5 PRECEDING AND CURRENT ROW) AS moving_average
	FROM monthly_views3



3. REGRESSION MODELING DATA


CREATE VIEW modeling_data2 AS 
SELECT *, COUNT(*) OVER(PARTITION BY year_month) AS monthly_videos_count

FROM (
    SELECT video_id, 'Broda Shaggi' AS comedian, YEAR(upload_date) AS [year],
		CAST(upload_date AS VARCHAR(7)) AS year_month,
		DATEDIFF(MONTH, upload_date, CAST(GETDATE() AS DATE)) AS months_since_upload,
        	duration AS video_duration, view_count, like_count,
		DATENAME(weekday, upload_date) AS day_of_week,
		CASE DATENAME(weekday, upload_date) 
			WHEN 'Saturday' THEN 'Weekend'
			WHEN 'Sunday' THEN 'Weekend'
			ELSE 'Weekday'
		END AS weekend_weekday

     FROM broda_shaggi3
     WHERE YEAR(upload_date) >= 2019) as a

 UNION

SELECT *, COUNT(*) OVER(PARTITION BY year_month) AS monthly_videos_count

FROM (
	SELECT video_id, 'Mc_lively' AS comedian,YEAR(upload_date) AS [year],
		CAST(upload_date AS VARCHAR(7)) AS year_month,
		DATEDIFF(MONTH, upload_date, CAST(GETDATE() AS DATE)) AS months_since_upload,
        	duration AS video_duration, view_count, like_count,
		DATENAME(weekday, upload_date) AS day_of_week,
		CASE DATENAME(weekday, upload_date) 
			WHEN 'Saturday' THEN 'Weekend'
			WHEN 'Sunday' THEN 'Weekend'
			ELSE 'Weekday'
		END AS weekend_weekday

        FROM mc_lively
	WHERE YEAR(upload_date) >= 2019) as a

UNION

SELECT *, COUNT(*) OVER(PARTITION BY year_month) AS monthly_videos_count

FROM (
	SELECT video_id, 'Mr macaroni' AS comedian, YEAR(upload_date) AS [year],  
		CAST(upload_date AS VARCHAR(7)) AS year_month,
		DATEDIFF(MONTH, upload_date, CAST(GETDATE() AS DATE)) AS months_since_upload,
       		duration AS video_duration, view_count, like_count,
		DATENAME(weekday, upload_date) AS day_of_week,
		CASE DATENAME(weekday, upload_date) 
			WHEN 'Saturday' THEN 'Weekend'
			WHEN 'Sunday' THEN 'Weekend'
			ELSE 'Weekday'
		END AS weekend_weekday

	FROM mr_macaroni
	WHERE YEAR(upload_date) >= 2019) as a

UNION

SELECT *, COUNT(*) OVER(PARTITION BY year_month) AS monthly_videos_count

FROM (

	SELECT video_id, 'Taaooma' AS comedian, YEAR(upload_date) AS [year],
		CAST(upload_date AS VARCHAR(7)) AS year_month,
		DATEDIFF(MONTH, upload_date, CAST(GETDATE() AS DATE)) AS months_since_upload,
       	        duration AS video_duration, view_count, like_count,
		DATENAME(weekday, upload_date) AS day_of_week,
		CASE DATENAME(weekday, upload_date) 
			WHEN 'Saturday' THEN 'Weekend'
			WHEN 'Sunday' THEN 'Weekend'
			ELSE 'Weekday'
		END AS weekend_weekday

	FROM taaooma
	WHERE YEAR(upload_date) >= 2019) as a


	









